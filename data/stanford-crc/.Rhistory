ncol = 3,
common.legend = TRUE,
legend = "bottom",
align = "h") # Align horizontally with added space
print(combined_plot)
plots = list(p_gplsi, p_plsi, p_lda)
combined_plot <- ggarrange(plotlist = plots,
ncol = 3,
align = "h",
widths = c(1, 1, 1), # Equal widths
padding = unit(1, "cm"),
common.legend = TRUE,
legend = "bottom")
print(combined_plot)
p_plsi
p_gplsi
plots <- list(p_gplsi, p_plsi, p_lda)
combined_plot <- ggarrange(plotlist = plots,
ncol = 3,
common.legend = TRUE,
legend = "bottom",
align = "h") # Align horizontally with added space
print(combined_plot)
# survival analysis - high/low groups
library(ggfortify)
install.packages("ggfortify")
install.packages("survminer")
# survival analysis - high/low groups
library(ggfortify)
library(survminer)
survival = read_csv('survival_splsi.csv')
root_path = '~/Dropbox/SpLSI/data/stanford-crc/model'
setwd(root_path)
survival = read_csv('survival_splsi.csv')
root_path = '~/Dropbox/SpLSI/data/stanford-crc'
setwd(root_path)
survival = read_csv('survival_splsi.csv')
colnames(survival) =
c("region_id", "Topic1","Topic2","Topic3","Topic4",
"Topic5","Topic6","status",
"time")
colnames(survival)
paste0('Topic',1:6)
fit = surv_cutpoint(
survival,
time = "time",
event = "status",
variables,
minprop = 0.1,
progressbar = TRUE
)
variables = paste0('Topic',1:6)
fit = surv_cutpoint(
survival,
time = "time",
event = "status",
variables,
minprop = 0.1,
progressbar = TRUE
)
fit$cutpoint
quantile((Topic1,0.75))
quantile(survival$Topic1,0.75)
quantile(survival$Topic2,0.75)
quantile(survival$Topic3,0.75)
quantile(survival$Topic6,0.75)
plot(fit, "DEPDC1", palette = "npg")
plot(fit, "Topic1", palette = "npg")
res.cut = surv_cutpoint(
survival,
time = "time",
event = "status",
variables,
minprop = 0.1,
progressbar = TRUE
)
plot(fit, "Topic1", palette = "npg")
plot(res.cut, "Topic1", palette = "npg")
res.cat <- surv_categorize(res.cut)
surv_fit <- survfit(Surv(time, status) ~Topic1, data = res.cat)
ggsurvplot(surv_fit, data = res.cat, risk.table = TRUE, conf.int = TRUE)
ggsurvplot(surv_fit, data = res.cat, risk.table = FALSE, conf.int = TRUE)
par(mfrow=c(3,2))
surv_fit <- survfit(Surv(time, status) ~Topic1, data = res.cat)
ggsurvplot(surv_fit, data = res.cat, risk.table = FALSE, conf.int = TRUE)
surv_fit <- survfit(Surv(time, status) ~Topic1, data = res.cat)
p1 = ggsurvplot(surv_fit, data = res.cat, risk.table = FALSE, conf.int = TRUE)
surv_fit <- survfit(Surv(time, status) ~Topic2, data = res.cat)
p2 = ggsurvplot(surv_fit, data = res.cat, risk.table = FALSE, conf.int = TRUE)
surv_fit <- survfit(Surv(time, status) ~Topic3, data = res.cat)
p3 = ggsurvplot(surv_fit, data = res.cat, risk.table = FALSE, conf.int = TRUE)
surv_fit <- survfit(Surv(time, status) ~Topic4, data = res.cat)
p4 = ggsurvplot(surv_fit, data = res.cat, risk.table = FALSE, conf.int = TRUE)
surv_fit <- survfit(Surv(time, status) ~Topic5, data = res.cat)
p5 = ggsurvplot(surv_fit, data = res.cat, risk.table = FALSE, conf.int = TRUE)
surv_fit <- survfit(Surv(time, status) ~Topic6, data = res.cat)
p6 = ggsurvplot(surv_fit, data = res.cat, risk.table = FALSE, conf.int = TRUE)
grid.arrange(p1,p2,p3,p4,p5,p6,ncol=2)
surv_fit <- survfit(Surv(time, status) ~Topic1, data = res.cat)
p1 = ggsurvplot(surv_fit, data = res.cat, risk.table = FALSE, conf.int = TRUE)$plot
surv_fit <- survfit(Surv(time, status) ~Topic2, data = res.cat)
p2 = ggsurvplot(surv_fit, data = res.cat, risk.table = FALSE, conf.int = TRUE)$plot
surv_fit <- survfit(Surv(time, status) ~Topic3, data = res.cat)
p3 = ggsurvplot(surv_fit, data = res.cat, risk.table = FALSE, conf.int = TRUE)$plot
surv_fit <- survfit(Surv(time, status) ~Topic4, data = res.cat)
p4 = ggsurvplot(surv_fit, data = res.cat, risk.table = FALSE, conf.int = TRUE)$plot
surv_fit <- survfit(Surv(time, status) ~Topic5, data = res.cat)
p5 = ggsurvplot(surv_fit, data = res.cat, risk.table = FALSE, conf.int = TRUE)$plot
surv_fit <- survfit(Surv(time, status) ~Topic6, data = res.cat)
p6 = ggsurvplot(surv_fit, data = res.cat, risk.table = FALSE, conf.int = TRUE)$plot
grid.arrange(p1,p2,p3,p4,p5,p6,ncol=2)
## Topic Alignment
library(purrr)
library(dplyr)
library(tidyr)
library(tibble)
library(stringr)
library(alto)
library(magrittr)
root_path = '~/Dropbox/SpLSI/data/stanford-crc/model'
root_path_Ahat = '~/Dropbox/SpLSI/data/stanford-crc/model/Ahats'
root_path_What = '~/Dropbox/SpLSI/data/stanford-crc/model/Whats'
label_data = read.csv('~/Dropbox/SpLSI/data/stanford-crc/dataset/Charville_c001_v001_r001_reg001.D.csv', row.names = 1)
## Topic Alignment
library(purrr)
library(dplyr)
library(tidyr)
library(tibble)
library(stringr)
library(alto)
library(magrittr)
root_path = '~/Dropbox/SpLSI/data/stanford-crc/model'
install.packages("devtools")
install.packages("devtools")
devtools::install_github('lasy/alto')
library(alto)
library(magrittr)
root_path = '~/Dropbox/SpLSI/data/stanford-crc/model'
root_path_Ahat = '~/Dropbox/SpLSI/data/stanford-crc/model/Ahats'
root_path_What = '~/Dropbox/SpLSI/data/stanford-crc/model/Whats'
label_data = read.csv('~/Dropbox/SpLSI/data/stanford-crc/dataset/Charville_c001_v001_r001_reg001.D.csv', row.names = 1)
label_data = read.csv('~/Dropbox/SpLSI/data/stanford-crc/output/Charville_c001_v001_r001_reg001.D.csv', row.names = 1)
cell_names = rownames(label_data)
immune_names = c('CD4 T cell', 'CD8 T cell', 'B cell', 'Macrophage', 'Granulocyte', 'Blood vessel', 'Stroma', 'Other')
setwd(root_path)
filenames_A = list.files(root_path_Ahat)
filenames_W = list.files(root_path_What)
ntopics = 6
get_K = function(x){
v = seq(1:length(x))
diff = x-v
K = length(x)
for(i in 1:length(x)){
if(diff[i]!=0){
K=x[i]
break
}
}
return(K)
}
get_paths = function(method){
models = list()
filesA = filenames_A[grep(method, filenames_A)]
if(method=="PLSI"){filesA = filesA[!grepl("SPLSI", filesA)]}
filesW = filenames_W[grep(method, filenames_W)]
if(method=="PLSI"){filesW = filesW[!grepl("SPLSI", filesW)]}
for(t in 1:ntopics){
topic_name = as.character(t)
print(topic_name)
Ahat = read.csv(paste0(root_path_Ahat, '/', filenames_A[t]), header = FALSE)
Ahat = t(Ahat)
rownames(Ahat) = immune_names
What = read.csv(paste0(root_path_What, '/', filenames_W[t]), header = FALSE)
#What = What[indices_3,]
What = as.matrix(What)
models[[topic_name]] <- list(gamma = What, beta = t(as.matrix(Ahat)))
}
result = align_topics(models)
paths = compute_number_of_paths(result, plot = FALSE)$n_paths
K_hat = get_K(paths)
print(paste0("K_hat is ", K_hat))
p = plot(result)
print(p)
}
get_paths('splsi')
library(readr)
library(ggplot2)
library(pROC)
library(compositions)
library(dplyr)
install.packages("pROC")
install.packages("pROC")
install.packages("pROC")
install.packages("pROC")
install.packages("pROC")
library(readr)
library(ggplot2)
library(pROC)
library(compositions)
library(dplyr)
process_data = function(file_path) {
survival <- read_csv(file_path)
colnames(survival) <- c("region_id", "Topic1", "Topic2", "Topic3", "Topic4", "Topic5", "Topic6", "status", "time")
X <- scale(ilr(survival[, 2:7]), center = TRUE, scale = FALSE)
#X = as.matrix(survival[, 3:7])
y <- as.factor(1-survival$status)
set.seed(123)
train_index <- sample(1:nrow(survival), round(0.7*nrow(survival)))
X_train <- X[train_index, ]
y_train <- y[train_index]
X_test <- X[-train_index, ]
y_test <- y[-train_index]
fit <- glm(y_train ~ X_train, family = binomial)
test_data <- data.frame(X_train = I(X_test))
test_probs <- predict(fit, newdata = test_data, type = "response")
roc_obj <- roc(y_test, test_probs)
return(list(fit = fit, roc = roc_obj, auc = auc(roc_obj)))
}
setwd()
getwd()
setwd("/Users/jeong-yeojin/Dropbox/SpLSI/data/stanford-crc")
data_files <- c('survival_splsi.csv', 'survival_plsi.csv', 'survival_lda.csv')
results <- lapply(data_files, process_data)
models <- lapply(results, function(res) res$fit)
roc_objects <- lapply(results, function(res) res$roc)
auc_scores <- sapply(results, function(res) res$auc)
roc_data <- do.call(rbind, lapply(seq_along(roc_objects), function(i) {
data.frame(
FPR = 1 - roc_objects[[i]]$specificities,
TPR = roc_objects[[i]]$sensitivities,
Method = data_files[i],
AUC = auc_scores[i]
)
}))
# Plot ROC curves
ggplot(roc_data, aes(x = FPR, y = TPR, color = Method)) +
geom_line() +
geom_abline(linetype = "dashed", color = "gray") +
labs(title = "ROC Curves for Different Models",
x = "False Positive Rate",
y = "True Positive Rate") +
annotate("text", x = 0.8, y = 0.2, label = paste("AUC (Splsi):", round(auc_scores[1], 2)), color = "red") +
annotate("text", x = 0.8, y = 0.15, label = paste("AUC (Plsi):", round(auc_scores[2], 2)), color = "blue") +
annotate("text", x = 0.8, y = 0.1, label = paste("AUC (LDA):", round(auc_scores[3], 2)), color = "green") +
theme_minimal()
library(compositions)
library(tidyverse)
library(gridExtra)
library(ggpubr)
library(survival)
root_path = '~/Dropbox/SpLSI/data/stanford-crc'
setwd(root_path)
survival = read_csv('survival_splsi.csv')
colnames(survival) =
c("region_id", "Topic1","Topic2","Topic3","Topic4",
"Topic5","Topic6","status",
"time")
variables = paste0('Topic',1:6)
res.cut = surv_cutpoint(
survival,
time = "time",
event = "status",
variables,
minprop = 0.1,
progressbar = TRUE
)
plot(res.cut, "Topic1", palette = "npg")
res.cat
res.cat <- surv_categorize(res.cut)
res.cat
colnames(survival) <- c("region_id", "Topic1", "Topic2", "Topic3", "Topic4", "Topic5", "Topic6", "status", "time")
survival$Topic1 <- as.factor(survival$Topic1)
survival$Topic2 <- as.factor(survival$Topic2)
survival$Topic3 <- as.factor(survival$Topic3)
survival$Topic4 <- as.factor(survival$Topic4)
survival$Topic5 <- as.factor(survival$Topic5)
survival$Topic6 <- as.factor(survival$Topic6)
X <- model.matrix(~ Topic1 + Topic2 + Topic3 + Topic4 + Topic5 + Topic6, data = survival)[, -1]
dim(X)
survival = read_csv('survival_splsi.csv')
colnames(survival) =
c("region_id", "Topic1","Topic2","Topic3","Topic4",
"Topic5","Topic6","status",
"time")
variables = paste0('Topic',1:6)
res.cut = surv_cutpoint(
survival,
time = "time",
event = "status",
variables,
minprop = 0.1,
progressbar = TRUE
)
res.cat <- surv_categorize(res.cut)
res.cat$Topic1 <- as.factor(res.cat$Topic1)
res.cat$Topic2 <- as.factor(res.cat$Topic2)
res.cat$Topic3 <- as.factor(res.cat$Topic3)
res.cat$Topic4 <- as.factor(res.cat$Topic4)
res.cat$Topic5 <- as.factor(res.cat$Topic5)
res.cat$Topic6 <- as.factor(res.cat$Topic6)
X <- model.matrix(~ Topic1 + Topic2 + Topic3 + Topic4 + Topic5 + Topic6, data = survival)[, -1]
y <- as.factor(1 - survival$status)
View(X)
View(res.cat)
X <- model.matrix(~ Topic1 + Topic2 + Topic3 + Topic4 + Topic5 + Topic6, data = res.cat)[, -1]
View(X)
process_data_binary <- function(file_path) {
survival <- read_csv(file_path)
colnames(survival) <- c("region_id", "Topic1", "Topic2", "Topic3", "Topic4", "Topic5", "Topic6", "status", "time")
variables = paste0('Topic',1:6)
res.cut = surv_cutpoint(
survival,
time = "time",
event = "status",
variables,
minprop = 0.1,
progressbar = TRUE
)
res.cat <- surv_categorize(res.cut)
res.cat$Topic1 <- as.factor(res.cat$Topic1)
res.cat$Topic2 <- as.factor(res.cat$Topic2)
res.cat$Topic3 <- as.factor(res.cat$Topic3)
res.cat$Topic4 <- as.factor(res.cat$Topic4)
res.cat$Topic5 <- as.factor(res.cat$Topic5)
res.cat$Topic6 <- as.factor(res.cat$Topic6)
X <- model.matrix(~ Topic1 + Topic2 + Topic3 + Topic4 + Topic5 + Topic6, data = res.cat)[, -1]
y <- as.factor(survival$status)
set.seed(123)
train_index <- sample(1:nrow(survival), round(0.7 * nrow(survival)))
X_train <- X[train_index, ]
y_train <- y[train_index]
X_test <- X[-train_index, ]
y_test <- y[-train_index]
fit <- glm(y_train ~ ., data = as.data.frame(X_train), family = binomial)
test_data <- as.data.frame(X_test)
test_probs <- predict(fit, newdata = test_data, type = "response")
roc_obj <- roc(y_test, test_probs)
return(list(fit = fit, roc = roc_obj, auc = auc(roc_obj)))
}
data_files <- c('survival_splsi.csv', 'survival_plsi.csv', 'survival_lda.csv')
results <- lapply(data_files, process_data)
results <- lapply(data_files, process_data_binary)
models <- lapply(results, function(res) res$fit)
roc_objects <- lapply(results, function(res) res$roc)
auc_scores <- sapply(results, function(res) res$auc)
roc_data <- do.call(rbind, lapply(seq_along(roc_objects), function(i) {
data.frame(
FPR = 1 - roc_objects[[i]]$specificities,
TPR = roc_objects[[i]]$sensitivities,
Method = data_files[i],
AUC = auc_scores[i]
)
}))
# Plot ROC curves
ggplot(roc_data, aes(x = FPR, y = TPR, color = Method)) +
geom_line() +
geom_abline(linetype = "dashed", color = "gray") +
labs(title = "ROC Curves for Different Models",
x = "False Positive Rate",
y = "True Positive Rate") +
annotate("text", x = 0.8, y = 0.2, label = paste("AUC (GpLSI):", round(auc_scores[1], 2)), color = "red") +
annotate("text", x = 0.8, y = 0.15, label = paste("AUC (pLSI):", round(auc_scores[2], 2)), color = "blue") +
annotate("text", x = 0.8, y = 0.1, label = paste("AUC (LDA):", round(auc_scores[3], 2)), color = "green") +
theme_minimal()
roc_data
results
results[[1]]
res1 = process_data_binary('survival_splsi.csv')
res1
res1 = process_data_binary('survival_lda.csv')
res1
data_files <- c('survival_splsi.csv', 'survival_plsi.csv', 'survival_lda.csv')
results <- lapply(data_files, process_data_binary)
results
survival = survival %>%
mutate(high_topic1 = ifelse(Topic1>quantile(Topic1, 0.75), 1, 0)) %>%
mutate(high_topic2 = ifelse(Topic2>quantile(Topic2, 0.75), 1, 0)) %>%
mutate(high_topic3 = ifelse(Topic3>quantile(Topic3, 0.75), 1, 0)) %>%
mutate(high_topic4 = ifelse(Topic4>quantile(Topic4, 0.75), 1, 0)) %>%
mutate(high_topic5 = ifelse(Topic5>quantile(Topic5, 0.75), 1, 0)) %>%
mutate(high_topic6 = ifelse(Topic6>quantile(Topic6, 0.75), 1, 0))
X <- model.matrix(~ Topic1 + Topic2 + Topic3 + Topic4 + Topic5 + Topic6, data = survival)[, -1]
X <- model.matrix(~ high_topic1 + high_topic2 + high_topic3 + high_topic4 + high_topic5 + high_topic6, data = survival)[, -1]
y <- as.factor(survival$status)
set.seed(123)
train_index <- sample(1:nrow(survival), round(0.7 * nrow(survival)))
X_train <- X[train_index, ]
y_train <- y[train_index]
X_test <- X[-train_index, ]
y_test <- y[-train_index]
fit <- glm(y_train ~ ., data = as.data.frame(X_train), family = binomial)
test_data <- as.data.frame(X_test)
test_probs <- predict(fit, newdata = test_data, type = "response")
roc_obj <- roc(y_test, test_probs)
auc
auc(roc_obj)
process_data_binary <- function(file_path) {
survival <- read_csv(file_path)
colnames(survival) <- c("region_id", "Topic1", "Topic2", "Topic3", "Topic4", "Topic5", "Topic6", "status", "time")
variables = paste0('Topic',1:6)
res.cut = surv_cutpoint(
survival,
time = "time",
event = "status",
variables,
minprop = 0.3,
progressbar = TRUE
)
res.cat <- surv_categorize(res.cut)
res.cat$Topic1 <- as.factor(res.cat$Topic1)
res.cat$Topic2 <- as.factor(res.cat$Topic2)
res.cat$Topic3 <- as.factor(res.cat$Topic3)
res.cat$Topic4 <- as.factor(res.cat$Topic4)
res.cat$Topic5 <- as.factor(res.cat$Topic5)
res.cat$Topic6 <- as.factor(res.cat$Topic6)
X <- model.matrix(~ Topic1 + Topic2 + Topic3 + Topic4 + Topic5 + Topic6, data = res.cat)[, -1]
y <- as.factor(survival$status)
set.seed(123)
train_index <- sample(1:nrow(survival), round(0.7 * nrow(survival)))
X_train <- X[train_index, ]
y_train <- y[train_index]
X_test <- X[-train_index, ]
y_test <- y[-train_index]
fit <- glm(y_train ~ ., data = as.data.frame(X_train), family = binomial)
test_data <- as.data.frame(X_test)
test_probs <- predict(fit, newdata = test_data, type = "response")
roc_obj <- roc(y_test, test_probs)
return(list(fit = fit, roc = roc_obj, auc = auc(roc_obj)))
}
data_files <- c('survival_splsi.csv', 'survival_plsi.csv', 'survival_lda.csv')
results <- lapply(data_files, process_data_binary)
models <- lapply(results, function(res) res$fit)
roc_objects <- lapply(results, function(res) res$roc)
auc_scores <- sapply(results, function(res) res$auc)
roc_data <- do.call(rbind, lapply(seq_along(roc_objects), function(i) {
data.frame(
FPR = 1 - roc_objects[[i]]$specificities,
TPR = roc_objects[[i]]$sensitivities,
Method = data_files[i],
AUC = auc_scores[i]
)
}))
# Plot ROC curves
ggplot(roc_data, aes(x = FPR, y = TPR, color = Method)) +
geom_line() +
geom_abline(linetype = "dashed", color = "gray") +
labs(title = "ROC Curves for Different Models",
x = "False Positive Rate",
y = "True Positive Rate") +
annotate("text", x = 0.8, y = 0.2, label = paste("AUC (GpLSI):", round(auc_scores[1], 2)), color = "red") +
annotate("text", x = 0.8, y = 0.15, label = paste("AUC (pLSI):", round(auc_scores[2], 2)), color = "blue") +
annotate("text", x = 0.8, y = 0.1, label = paste("AUC (LDA):", round(auc_scores[3], 2)), color = "green") +
theme_minimal()
roc_data[[1]]
roc_data
process_data_binary <- function(file_path) {
survival <- read_csv(file_path)
colnames(survival) <- c("region_id", "Topic1", "Topic2", "Topic3", "Topic4", "Topic5", "Topic6", "status", "time")
variables = paste0('Topic',1:6)
res.cut = surv_cutpoint(
survival,
time = "time",
event = "status",
variables,
minprop = 0.2,
progressbar = TRUE
)
res.cat <- surv_categorize(res.cut)
res.cat$Topic1 <- as.factor(res.cat$Topic1)
res.cat$Topic2 <- as.factor(res.cat$Topic2)
res.cat$Topic3 <- as.factor(res.cat$Topic3)
res.cat$Topic4 <- as.factor(res.cat$Topic4)
res.cat$Topic5 <- as.factor(res.cat$Topic5)
res.cat$Topic6 <- as.factor(res.cat$Topic6)
X <- model.matrix(~ Topic1 + Topic2 + Topic3 + Topic4 + Topic5 + Topic6, data = res.cat)[, -1]
y <- as.factor(survival$status)
set.seed(123)
train_index <- sample(1:nrow(survival), round(0.7 * nrow(survival)))
X_train <- X[train_index, ]
y_train <- y[train_index]
X_test <- X[-train_index, ]
y_test <- y[-train_index]
fit <- glm(y_train ~ ., data = as.data.frame(X_train), family = binomial)
test_data <- as.data.frame(X_test)
test_probs <- predict(fit, newdata = test_data, type = "response")
roc_obj <- roc(y_test, test_probs)
return(list(fit = fit, roc = roc_obj, auc = auc(roc_obj)))
}
data_files <- c('survival_splsi.csv', 'survival_plsi.csv', 'survival_lda.csv')
results <- lapply(data_files, process_data_binary)
models <- lapply(results, function(res) res$fit)
roc_objects <- lapply(results, function(res) res$roc)
auc_scores <- sapply(results, function(res) res$auc)
roc_data <- do.call(rbind, lapply(seq_along(roc_objects), function(i) {
data.frame(
FPR = 1 - roc_objects[[i]]$specificities,
TPR = roc_objects[[i]]$sensitivities,
Method = data_files[i],
AUC = auc_scores[i]
)
}))
# Plot ROC curves
ggplot(roc_data, aes(x = FPR, y = TPR, color = Method)) +
geom_line() +
geom_abline(linetype = "dashed", color = "gray") +
labs(title = "ROC Curves for Different Models",
x = "False Positive Rate",
y = "True Positive Rate") +
annotate("text", x = 0.8, y = 0.2, label = paste("AUC (GpLSI):", round(auc_scores[1], 2)), color = "red") +
annotate("text", x = 0.8, y = 0.15, label = paste("AUC (pLSI):", round(auc_scores[2], 2)), color = "blue") +
annotate("text", x = 0.8, y = 0.1, label = paste("AUC (LDA):", round(auc_scores[3], 2)), color = "green") +
theme_minimal()
